// import { useState, useEffect } from 'react';
// import {
//     Card,
//     Text,
//     Divider,
//     Flex,
//     Switch,
//     Progress,
// } from '@gravity-ui/uikit';
// import block from 'bem-cn-lite';
// import './InterrogatorLightManagement.scss';
// import { RadiationSourceCurrentManager } from '@features/RadiationSourceCurrent';
// import { TermalControllerCurrent } from '@features/TermalControllerCurrent';
// import { AmplificationCoefficient } from '@features/AmplificationCoefficient';
// import { DisplacementCoefficient } from '@features/DisplacementCoefficient';

// // üëá —Ç–∏–ø–∏–∑–∞—Ü–∏—è —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞–º –æ—Ç–¥–∞—ë—Ç grpc
// interface MonitoringData {
//     minOpticalPower_dBm: number;
//     maxLaserCurrent_mA: number;
//     currentTemperature_C: number;
// }

// // üëá –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º grpc-–æ–±—ë—Ä—Ç–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å–¥–µ–ª–∞–ª –≤ preload/bridge
// const { grpc } = window.electron;

// const b = block('light-management-widget');

// export const InterrogatorLightManagement = () => {
//     const [autoMode, setAutoMode] = useState(false);

//     const [minOpticalPower, setMinOpticalPower] = useState<number>(0);
//     const [maxLaserCurrent, setMaxLaserCurrent] = useState<number>(0);
//     const [currentTemperature, setCurrentTemperature] = useState<number>(0);

//     useEffect(() => {
//         let isMounted = true;

//         const fetchMonitoring = async () => {
//             try {
//                 // ‚ö° –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∞–Ω–Ω—ã–µ –±–µ—Ä—ë–º –∏–∑ listDrivers (–∏–ª–∏ listBdiModules / listTestSources)
//                 // –ø–æ–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º, —á—Ç–æ –ø–µ—Ä–≤—ã–π –¥—Ä–∞–π–≤–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
//                 const drivers = await grpc.listDrivers();

//                 console.log(drivers)
//                 if (isMounted && drivers.length > 0) {
//                     const m: MonitoringData = drivers[0]; // <- –∏–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ–¥ —Å–µ–±—è
//                     setMinOpticalPower(m.minOpticalPower_dBm ?? 0);
//                     setMaxLaserCurrent(m.maxLaserCurrent_mA ?? 0);
//                     setCurrentTemperature(m.currentTemperature_C ?? 0);
//                 }
//             } catch (e) {
//                 console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ grpc:", e);
//             }
//         };

//         fetchMonitoring();
//         const interval = setInterval(fetchMonitoring, 2000);

//         return () => {
//             isMounted = false;
//             clearInterval(interval);
//         };
//     }, []);

//     return (
//         <div className={b()}>
//             <Card view="outlined" className={b('light-manager-card')}>
//                 <Flex>
//                     <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', width: '100%' }}>
//                         <Text variant="header-2">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –∏–∑–ª—É—á–µ–Ω–∏—è</Text>
//                         <div style={{ display: 'flex', alignItems: 'center' }}>
//                             <Text variant="body-2" className="mr-2">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º</Text>
//                             <Switch checked={autoMode} onChange={() => setAutoMode(!autoMode)} />
//                         </div>
//                     </div>
//                 </Flex>
//                 <Flex direction="column" gap={2}>
//                     <RadiationSourceCurrentManager />
//                     <Divider className="my-4" />
//                     <TermalControllerCurrent />
//                     <Divider className="my-4" />
//                     <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '16px', marginBottom: '24px' }}>
//                         <AmplificationCoefficient />
//                         <DisplacementCoefficient />
//                     </div>
//                 </Flex>
//             </Card>

//             {/* üî• –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ */}
//             <Card view="outlined" className="mb-4">
//                 <Flex>
//                     <Text variant="header-2">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</Text>
//                 </Flex>
//                 <Flex>
//                     <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 1fr', gap: '16px' }}>
//                         <Card view="outlined">
//                             <Flex style={{ flexDirection: 'column', textAlign: 'center', padding: '16px' }}>
//                                 <Text variant="body-2" color="secondary" className="mb-2">–ú–∏–Ω. –æ–ø—Ç–∏—á–µ—Å–∫–∞—è –º–æ—â–Ω–æ—Å—Ç—å</Text>
//                                 <Text variant="display-3" color="brand" className="mb-0">
//                                     {minOpticalPower.toFixed(2)} –¥–ë–º
//                                 </Text>
//                             </Flex>
//                         </Card>

//                         <Card view="outlined">
//                             <Flex style={{ flexDirection: 'column', textAlign: 'center', padding: '16px' }}>
//                                 <Text variant="body-2" color="secondary" className="mb-2">–ú–∞–∫—Å. —Ç–æ–∫ –ö–ò–ò</Text>
//                                 <Text variant="display-3" color="info" className="mb-0">
//                                     {maxLaserCurrent} –º–ê
//                                 </Text>
//                             </Flex>
//                         </Card>

//                         <Card view="outlined">
//                             <Flex style={{ flexDirection: 'column', textAlign: 'center', padding: '16px' }}>
//                                 <Text variant="body-2" color="secondary" className="mb-2">–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</Text>
//                                 <Text variant="display-3" color="warning" className="mb-2">
//                                     {currentTemperature.toFixed(1)} ¬∞C
//                                 </Text>
//                                 <Progress
//                                     value={((currentTemperature - 15) / 25) * 100}
//                                     theme="warning"
//                                 />
//                             </Flex>
//                         </Card>
//                     </div>
//                 </Flex>
//             </Card>

//             <Card view="outlined" className="info-panel" style={{ backgroundColor: 'var(--g-color-base-info-light)' }}>
//                 <Flex>
//                     <Text variant="subheader-1" className="mb-2">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</Text>
//                     <div style={{ fontSize: '14px', color: 'var(--g-color-text-primary)' }}>
//                         <div>‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Ç–æ–∫–∞ –ö–ò–ò: 0 - 3000 –º–ê</div>
//                         <div>‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Ç–æ–∫–∞ TEC: ¬±4000 –º–ê</div>
//                         <div>‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä: 15 - 40 ¬∞C</div>
//                         <div>‚Ä¢ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã</div>
//                     </div>
//                 </Flex>
//             </Card>
//         </div>
//     )
// };


import block from "bem-cn-lite";
import "./InterrogatorLightManagement.scss";
import { InterrogatorDiscovery } from "@features/InterrogatorDiscovery";

const b = block("light-management-widget");

export const InterrogatorLightManagement = () => {

    return (
        <div className={b()}>
            <InterrogatorDiscovery />
            {/* –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ */}
            {/* <Card view="outlined" className="mb-4" style={{ marginTop: 16 }}>
                <Flex>
                    <Text variant="header-2">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</Text>
                </Flex>
                <Flex>
                    <div
                        style={{
                            display: "grid",
                            gridTemplateColumns: "1fr 1fr 1fr",
                            gap: "16px",
                            width: "100%",
                        }}
                    >
                        <Card view="outlined">
                            <Flex
                                style={{
                                    flexDirection: "column",
                                    textAlign: "center",
                                    padding: "16px",
                                }}
                            >
                                <Text variant="body-2" color="secondary" className="mb-2">
                                    –ú–∏–Ω. –æ–ø—Ç–∏—á–µ—Å–∫–∞—è –º–æ—â–Ω–æ—Å—Ç—å
                                </Text>
                                <Text variant="display-3" color="brand" className="mb-0">
                                    {minOpticalPower.toFixed(2)} –¥–ë–º
                                </Text>
                            </Flex>
                        </Card>

                        <Card view="outlined">
                            <Flex
                                style={{
                                    flexDirection: "column",
                                    textAlign: "center",
                                    padding: "16px",
                                }}
                            >
                                <Text variant="body-2" color="secondary" className="mb-2">
                                    –ú–∞–∫—Å. —Ç–æ–∫ –ö–ò–ò
                                </Text>
                                <Text variant="display-3" color="info" className="mb-0">
                                    {maxLaserCurrent} –º–ê
                                </Text>
                            </Flex>
                        </Card>

                        <Card view="outlined">
                            <Flex
                                style={{
                                    flexDirection: "column",
                                    textAlign: "center",
                                    padding: "16px",
                                }}
                            >
                                <Text variant="body-2" color="secondary" className="mb-2">
                                    –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                                </Text>
                                <Text variant="display-3" color="warning" className="mb-2">
                                    {currentTemperature.toFixed(1)} ¬∞C
                                </Text>
                                <Progress
                                    value={((currentTemperature - 15) / 25) * 100}
                                    theme="warning"
                                />
                            </Flex>
                        </Card>
                    </div>
                </Flex>
            </Card> */}
        </div>
    );
};

