import { ipcMain } from "electron";
import * as path from "node:path";
import * as os from "node:os";
import { readDataFile, writeDataFile } from "../utils";
import log from "electron-log";

const DEFAULT_INPUTS_PATH = path.join(
  os.homedir(),
  "Documents",
  "Interrogator",
  "inputs.json"
);

const DEFAULT_FILE_PATHS_PATH = path.join(
  os.homedir(),
  "Documents",
  "Interrogator",
  "file_paths.json"
);

export function registerFileHandlers() {
  ipcMain.handle("getFilePaths", async () => {
    try {
      const data = readDataFile(DEFAULT_FILE_PATHS_PATH, {});
      log.info("üìñ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤");
      return data;
    } catch (e) {
      log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤", e);
      return {};
    }
  });

  ipcMain.handle("getSensorsData", async (_e: unknown, path: string) => {
    try {
      const data = readDataFile(path, []).slice(-200);
      log.info(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–∞—Ç—á–∏–∫–æ–≤ –∏–∑ ${path}`);
      return data;
    } catch (e) {
      log.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤: ${path}`, e);
      return [];
    }
  });

  ipcMain.handle("setFilePaths", async (_e, filePaths) => {
    try {
      const currentPaths = readDataFile<Record<string, string>>(
        DEFAULT_FILE_PATHS_PATH,
        {}
      );
      const updatedPaths = { ...currentPaths, ...filePaths };
      writeDataFile(DEFAULT_FILE_PATHS_PATH, updatedPaths);
      log.info("üíæ –ü—É—Ç–∏ —Ñ–∞–π–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", updatedPaths);
      return updatedPaths;
    } catch (e) {
      log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤", e);
      return {};
    }
  });

  ipcMain.handle("insertInput", async (_e, key: string, value: string) => {
    try {
      const data = readDataFile<Record<string, string>>(DEFAULT_INPUTS_PATH, {});
      data[key] = value;
      writeDataFile(DEFAULT_INPUTS_PATH, data);
      log.info("üíæ –ó–∞–ø–∏—Å–∞–Ω –∏–Ω–ø—É—Ç", key, value);
      return data;
    } catch (e) {
      log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω–ø—É—Ç–æ–≤", e);
      return {};
    }
  });

  ipcMain.handle("getInputs", async (_e: unknown) => {
    try {
      log.info("üíæ –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª —Å –∏–Ω–ø—É—Ç–∞–º–∏");
      return readDataFile<Record<string, string>>(DEFAULT_INPUTS_PATH, {});
    } catch (e) {
      log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∏–Ω–ø—É—Ç–æ–≤", e);
      return {};
    }
  });
}
