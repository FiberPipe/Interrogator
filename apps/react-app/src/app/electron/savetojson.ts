import * as fs from "node:fs";
import { SerialPort } from "serialport";
import { ReadlineParser } from "@serialport/parser-readline";

export function startSensorCollector(
  filePath: string,
  serialPortPath: string = "COM13",
  inputs: Record<string, any> = {}
) {
  console.log("======================================");
  console.log("üì° –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö");
  console.log("  –§–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏:", filePath);
  console.log("  –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ä—Ç:", serialPortPath);
  console.log("  Inputs:", inputs);
  console.log("======================================");

  if (!fs.existsSync(filePath)) {
    fs.writeFileSync(filePath, "[]", "utf8");
  }

  const BAUD_RATE = 9600;
  const RECONNECT_INTERVAL = 3000;
 

  function handleData(line: string) {
    line = line.trim();
    if (!line) return;

    let pkt: any;
    try {
      pkt = JSON.parse(line);
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ JSON.parse:", err, "–ò—Å—Ö–æ–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:", line);
      return;
    }

    // console.log("üì• –ü–æ–ª—É—á–µ–Ω –ø–∞–∫–µ—Ç:", pkt);

    const norm: Record<string, number> = {};
    const lambdaCentral: Record<string, number> = {};
    const fieldsArr = Array.isArray(inputs.fields) ? inputs.fields : null;
    const wavelengthsArr = Array.isArray(inputs.wavelengths) ? inputs.wavelengths : null;
for (let i = 0; i < 16; i++) {
  const key = `P${i}`; // JSON –ø—Ä–∏—Ö–æ–¥–∏—Ç P0..P15

  const rawField = fieldsArr 
    ? fieldsArr[i] 
    : inputs[`field${i+1}`]; // field1..field16

  const rawLambda = wavelengthsArr 
    ? wavelengthsArr[i]          // –º–∞—Å—Å–∏–≤ —Å –∏–Ω–¥–µ–∫—Å–æ–º 0..15
    : inputs[`lambdas_central${i}`]; // lambdas_central0..15

  const sub = rawField ? parseFloat((rawField as string).replace(",", ".")) : 0;
  const lam = rawLambda ? parseFloat((rawLambda as string).replace(",", ".")) : 0;

  const val = pkt[key];
  const num = typeof val === "number" ? val : parseFloat(val);

  norm[key] = isNaN(num) ? 0 : Math.max(0, num - sub);
  lambdaCentral[key] = isNaN(lam) ? 0 : lam;

  console.log(
    `norm[${key}] = num (${isNaN(num) ? "NaN" : num.toFixed(4)}) - sub (${sub.toFixed(4)}) = ${norm[key].toFixed(4)}, lambda=${lambdaCentral[key]}`
  );
}

    const lambdaResults: Record<string, number> = {};
    const sensorCount = Number(inputs.sensorCount) || 0;
    const sensorP = inputs.sensorPorts ?? {}; // —ç—Ç–æ –æ–±—ä–µ–∫—Ç { "0": [...], "1": [...] }

    for (let s = 0; s < sensorCount; s++) {
      const attached: string[] = Array.isArray(sensorP[s])
        ? sensorP[s].slice().sort((a: string, b: string) => {
          const na = parseInt(a.match(/\d+/)?.[0] ?? "0", 10);
          const nb = parseInt(b.match(/\d+/)?.[0] ?? "0", 10);
          return na - nb;
        })
        : [];

      if (attached.length < 2) {
        lambdaResults[`wavelength${s}`] = NaN;
        console.log(`sensor_${s}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Œª`);
        continue;
      }

      const weights = attached.map((p) => norm[p] ?? NaN);
      const lambdas = attached.map((p) => lambdaCentral[p] ?? 0);
      const sumWeights = weights.reduce((acc, w) => acc + (isFinite(w) ? w : 0), 0);

      const lambda =
        sumWeights > 0
          ? weights.reduce((acc, w, i) => acc + (isFinite(w) ? w * (lambdas[i] ?? 0) : 0), 0) /
          sumWeights
          : NaN;

      lambdaResults[`wavelength${s}`] = lambda;

            // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ "—Ñ–æ—Ä–º—É–ª—å–Ω–æ–º" —Å—Ç–∏–ª–µ
      console.log(`\nüì° Sensor_${s} —Ä–∞—Å—á–µ—Ç Œª`);
      console.log("--------------------------------------------------");

      // –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Å—É–º–º–∞—Ä–Ω–æ–≥–æ –≤–µ—Å–∞
      console.log(`Œ£w = ${weights.map((w) => w.toFixed(4)).join(" + ")} = ${sumWeights.toFixed(4)}`);

      // –§–æ—Ä–º—É–ª–∞ –¥–ª—è —á–∏—Å–ª–∏—Ç–µ–ª—è (—Å—É–º–º–∞ w·µ¢¬∑Œª·µ¢)
      const numerator = weights.reduce(
        (acc, w, i) => acc + (isFinite(w) ? w * (lambdas[i] ?? 0) : 0),
        0
      );

      const terms = weights.map((w, i) => `${w.toFixed(4)}¬∑${lambdas[i].toFixed(2)}`);
      console.log(`Œ£(w·µ¢¬∑Œª·µ¢) = ${terms.join(" + ")} = ${numerator.toFixed(4)}`);

      // –ò—Ç–æ–≥–æ–≤–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
      if (sumWeights > 0) {
        console.log(`Œª = Œ£(w·µ¢¬∑Œª·µ¢) / Œ£w = ${numerator.toFixed(4)} / ${sumWeights.toFixed(4)} = ${lambda.toFixed(6)}`);
      } else {
        console.log("Œª = NaN (Œ£w = 0)");
      }

      console.log("--------------------------------------------------");

      // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
      console.log(`sensor_${s}:`);
      console.log(`  attached P: ${attached}`);
      console.log(`  weights (norm - subtrac): ${weights.map((w) => w.toFixed(4))}`);
      console.log(`  lambdas (lambdaCentral): ${lambdas.map((l) => l.toFixed(4))}`);
      console.log(`  sumWeights: ${sumWeights.toFixed(4)}`);
      console.log(`  Œª: ${lambda.toFixed(6)}`);
    }

    let data: any[] = [];
    try {
      data = JSON.parse(fs.readFileSync(filePath, "utf8"));
      if (!Array.isArray(data)) data = [];
    } catch {
      data = [];
    }

    const finalRecord = {
      ...pkt,
      ...lambdaResults,
    };

    //console.log("üì§ –ó–∞–ø–∏—Å—ã–≤–∞—é:", finalRecord);

    data.push(finalRecord);
    fs.writeFileSync(filePath, JSON.stringify(data, null, 2), "utf8");
  }

  function connectSerialPort() {
    const port = new SerialPort({ path: serialPortPath, baudRate: BAUD_RATE, autoOpen: false });
    port.open((err) => {
      if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:", err.message);
        setTimeout(connectSerialPort, RECONNECT_INTERVAL);
        return;
      }
      console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ø–æ—Ä—Ç—É:", serialPortPath);
      const parser = port.pipe(new ReadlineParser({ delimiter: "\n" }));
      parser.on("data", handleData);
      port.on("close", () => {
        console.warn("‚ö†Ô∏è –ü–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
        setTimeout(connectSerialPort, RECONNECT_INTERVAL);
      });
    });
  }

  connectSerialPort();
}


